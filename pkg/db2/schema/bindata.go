// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x5b\x6f\xdb\xb8\xd6\x7d\xcf\xaf\x20\xe6\xc5\x36\x60\x07\x71\x5a\xe7\xe2\x20\x05\x5c\x47\xf3\xd5\x18\x57\x99\xc6\xca\xd7\x29\x06\x03\x82\x96\x68\x9b\xa7\x92\xa8\x92\x74\x1a\xcf\xc1\xf9\xef\x07\xba\xd9\xba\x90\xa2\x64\x2b\x73\x1e\x63\x6e\x2e\xae\xc5\x4d\x71\x5f\xa4\x0c\x06\x67\x83\x01\xf8\x9d\x72\xb1\x66\x78\xf1\x65\x0e\x1c\x24\xd0\x12\x71\x0c\x9c\xad\x17\x9c\x0d\x06\x67\xe1\xf8\xc3\xd6\x0b\xb0\x03\x56\x8c\x7a\x07\x83\x17\xcc\x38\xa1\x3e\xb8\x3d\xbf\x3a\xbf\xcc\x58\x2d\x77\x20\x58\xc3\x70\x7a\xc1\xe4\x6c\x61\x58\x80\x0b\x24\xb0\x87\x7d\x01\x05\xf1\x30\xdd\x0a\x70\x0f\x2e\xee\xa2\x21\x97\xda\xdf\xcb\xbf\xda\x2e\x09\xad\xb1\x6f\x53\x87\xf8\x6b\x70\x0f\x3a\xcf\xd6\xaf\x37\x9d\xbb\x14\xce\x77\x10\x73\xa0\x4d\xfd\x15\x65\x1e\xf1\xd7\x90\x0b\x46\xfc\x35\x07\xf7\x80\xfa\x09\xc6\x06\xdb\xdf\xe1\x6a\xeb\xdb\x82\x50\x1f\x2e\xa9\x43\x70\x38\xbe\x42\x2e\xc7\xb9\x65\x3c\xe2\x43\x0f\x73\x8e\xd6\x91\xc1\x4f\xc4\x7c\xe2\xaf\xef\x12\xee\x18\x31\x7b\x03\x03\x24\x36\xe0\x1e\x04\xdb\xa5\x4b\xec\x7e\x28\xd6\x46\x02\xb9\x34\x35\x73\xf0\x0a\x6d\x5d\x01\x05\x5a\xba\x98\x07\xc8\xc6\x21\xe9\x4e\x61\xf4\x27\x11\x1b\x48\x89\x93\xe1\x71\x16\x7b\xc3\x44\x1e\x1e\x83\x35\x65\x01\xf4\xc8\x9a\xa1\x90\x33\xbf\x03\xd6\x2e\xc0\x63\x60\x4d\x3e\xce\x8d\x3b\xb0\xb0\x37\xd8\x43\xe3\x84\xc4\x1d\x78\xfc\xe9\x63\x36\x06\x83\xc8\x63\xd3\x27\x63\x62\x19\xb1\x69\x11\x07\x74\xcf\x00\x00\x80\x38\x40\xe0\x57\x01\xcc\x47\x0b\x98\xcf\xf3\x79\x3f\xfa\x15\x05\x81\x4b\xb0\x03\x91\x00\xa1\x1f\xb8\x40\x5e\x00\x42\xa2\xd1\x9f\xe0\x6f\xea\xe3\xb3\xde\xdd\x59\x9e\xe8\x86\x70\x41\xd9\x0e\x22\xdb\xa6\x5b\x5f\x70\x48\x1c\xc8\xf1\x8f\x94\xf0\xc2\xf8\xf2\x6c\x98\xd3\x9a\x9c\x53\x6b\x15\x6a\x44\x73\x61\x4d\x9e\x2c\xf0\x75\x66\x7d\x02\xc3\xe8\x87\x99\x39\x7d\x32\x3e\x1b\xa6\x05\x3e\x7e\x4b\x7e\x32\x1f\xc1\xe7\x99\xf9\xff\x93\xf9\xb3\xb1\xff\x7b\xf2\xc7\xe1\xef\xe9\x64\xfa\xc9\x00\x43\x9d\x98\xa3\xb7\xbd\x08\x74\xd8\xf7\x25\x59\x13\x5f\x80\x07\xe3\xd7\xc9\xf3\xdc\x02\x3e\x7e\x15\x2f\xc8\xed\x76\x14\x8a\x3b\xe3\x31\xc3\x6b\xdb\x45\x9c\xf7\x8a\xee\x72\x1c\x86\x39\x07\xf6\x06\x31\x64\x0b\xcc\xc0\x0b\x62\x3b\xe2\xaf\xbb\x57\xef\x7b\x6a\x47\xe1\xd5\x0a\xdb\x2d\x48\x4b\x70\x12\x65\x05\xfa\xf0\xa0\x34\x4f\x3a\xb5\xa3\x01\x8e\x8f\xa4\xd2\xf2\x17\xca\x1c\xcc\x7e\x01\xc4\x17\x78\x8d\x59\x61\x54\xec\x02\xac\x18\x72\xb0\x40\xc4\xe5\xe0\x5f\x9c\xfa\x4b\xf5\x3e\xb8\xd8\x59\x63\x76\xfa\x3e\x24\x38\xc9\x3e\x70\xfc\x63\x8b\x7d\x5b\xc5\x2d\x36\x86\x1b\xc4\x37\x72\xbf\x15\xec\x03\x86\x5f\x08\xdd\x72\xa8\x9d\x98\x6c\x0b\x43\x3e\x47\xf1\x3d\x17\x39\x62\xcf\x23\x3d\x70\x17\x85\x15\x0e\x8e\xa8\x67\x6f\xbb\x94\xcb\xee\x88\xf0\xd6\xde\x5f\x13\xc5\x39\x0c\x23\xa1\x9d\x14\xdb\x6e\x03\xa7\xb6\xed\xfe\xe8\x24\x7f\x7a\x01\x65\x02\x33\x98\x06\x9e\xa2\x96\x61\xf1\x10\x51\x81\x5c\x68\x53\xe2\x73\xf9\x19\x5c\x61\x0c\x03\x4a\x5d\xf9\x68\x18\x07\xe1\x0a\xab\x7c\x1d\x0d\x33\xcc\x31\x7b\x51\x99\x78\xe8\x15\x8a\x57\xc8\xb1\x80\x9c\xfc\xad\xb2\x0a\x18\x15\xd4\xa6\xae\x52\xd7\xc1\x47\xea\xe3\x7e\xf0\x73\x80\x98\x20\x36\x09\x50\x1b\x17\x9c\x1c\xf6\x70\xdd\xc9\x15\xd5\xbf\x05\xf4\xf7\x4a\x53\xc9\xed\x06\xa8\xca\x35\xfe\xa9\x70\xd5\x48\x28\x78\xfc\x6a\x1a\x0f\xe0\xe3\x37\x8d\xe2\xc9\xdc\x32\x9e\x1a\x0a\xde\x63\x6b\xcc\xcf\x89\xa3\xd5\xd2\xe2\xd9\x2c\x87\xdf\xc2\x3d\x90\xb9\x35\x55\x36\x51\x72\x64\xc7\x52\xa2\xc8\x74\x62\x60\x8a\x7f\xe2\x74\xcb\x6c\x9c\x9e\x6e\x45\x48\x48\x1f\xf3\x4e\x67\x3c\x2e\x59\xd4\x78\x0e\x04\x43\x0e\x3e\x7d\x3b\x63\x98\x42\xbc\x3f\x35\x8e\xd3\xd5\x0a\x33\xe5\x5c\x8e\x5d\xb7\x62\x78\xb9\xdd\x55\x4d\xa6\xae\x03\x11\x0f\x2f\xd7\xc8\x29\x75\xe2\x6d\x66\x0e\xe1\x7c\x8b\x99\x64\xd6\xe8\xaa\x62\x96\x4d\x1d\xd9\x4a\xc3\x4b\xf9\x1c\x2f\x72\xbb\x5c\x1c\xdd\xae\x37\xa2\xa9\x80\xdc\xac\x06\x12\x72\xf3\x6a\x8b\x48\x67\x55\xc8\x98\x3e\x9a\x0b\xeb\x69\x32\x33\xad\xc2\x41\x82\xb9\xc9\x30\x2a\xd2\xc0\xf4\x93\x31\xfd\x0d\x74\xbb\x79\xe0\x0f\xe0\xa2\xd7\xd3\xc1\x65\x36\xb4\x00\x96\xdd\xea\x08\xaa\xf2\x51\xd9\xdf\x04\xad\xc6\x49\x15\x70\xdd\x48\x59\xe7\x8a\x3a\x25\x56\xaa\xf8\xb5\x1b\x2d\x35\xab\xfc\x53\xf1\xb2\xa1\xd8\x13\x23\xa6\x66\xb5\x72\xcc\x54\x4d\xa8\x88\x9a\x99\x29\xad\x9e\xd5\xf4\x7c\x66\x29\xd5\x2e\x5e\x92\x9a\x45\x53\x12\xd5\x0d\xac\xd5\x31\x52\x6a\x7b\x58\x5a\x9d\xdd\x23\xe5\xa3\xa7\xaa\x8c\xfe\x27\xb5\x8d\x78\x85\xd8\x7f\xc1\x2e\x0d\xb0\xac\x75\x23\x5e\xc3\x4a\x63\xeb\x0a\xc5\xa0\x87\x05\x52\x0c\x85\xbb\xa0\x1a\xe6\x64\xed\x23\xb1\x65\x58\xd6\x65\xb8\xbd\xea\xfd\xf9\xd7\x21\x39\xf9\xf7\x7f\x64\xe9\xc9\x9f\x7f\x15\x4b\x1e\xec\x51\x45\x38\x3b\x60\xf9\xd4\xc7\x95\xc9\xce\x01\xab\x0c\x93\x28\x23\x1e\x0e\x43\x8c\xef\xf0\xd0\x73\x37\x0c\xf9\xeb\x8a\xf6\x95\xa2\x8e\x21\x4e\xfa\x34\x25\xdc\x6a\x5d\x01\xf1\xe3\xf4\x68\xce\x75\x79\x30\x88\xed\xa7\x8f\xf3\xe7\xcf\x66\xe8\xf2\x85\x61\xa9\x5b\x43\x95\xa9\x77\xb6\x51\xd4\xf4\xde\x6b\x4f\xa6\x72\x85\x46\x42\x35\x37\xa6\x5c\xea\x03\x12\x08\xac\x28\xab\xd1\x40\x05\x0f\x13\x6b\xa2\x91\x38\x33\x17\xc6\x93\x05\x66\xa6\xf5\x58\x6a\xa2\x46\x81\x66\x01\xba\x9d\x21\x24\x3e\x11\x04\xb9\x90\x47\x58\xe7\xfc\x87\xdb\xe9\x83\xce\xe5\xc5\xf0\x7a\x70\x71\x3d\xb8\xbc\x02\xc3\xd1\x78\x74\x33\xbe\x1c\x9d\xbf\xbb\xba\xba\x1a\xdd\x0c\x2e\x46\x9d\xde\x5d\x3d\xf4\x4b\x48\x7c\x07\xbf\xe6\xb7\x60\xb9\x83\x82\x12\xa7\x7a\xa5\xdb\xd1\xd5\x6d\x93\x95\xde\xc1\x2d\xc7\xfb\xdb\x12\x12\x1f\x16\xdb\x91\x95\xeb\x5d\x0f\xaf\xaf\xdf\x37\x59\xef\x3d\x44\x8e\x03\x8b\x7d\x8d\xea\x35\xae\x2f\x46\x8d\x34\x8d\x60\x7c\x35\xa7\xf9\x61\xd4\x8f\xaf\x5c\xe2\x66\x38\xba\x4d\x65\x28\x4e\x55\x65\x83\xb8\xce\xb1\x3a\xaa\x79\x1e\x3e\x2d\x1a\xdc\x85\x31\x37\xa6\x56\xe6\x6d\xc4\x39\xc7\xd5\x8d\xe5\x3e\x18\xf6\xe3\x57\x0f\x7a\xb9\xb2\x9e\x71\x13\xb5\x0a\x58\x59\x0b\xb6\x05\xd8\x1a\xad\xae\xe3\x5d\xd5\xac\xd7\xd2\x86\xe3\xaa\xaf\xfd\x26\x6e\x54\xf4\x56\x5a\xd8\x72\x49\x8b\xa1\x1d\x54\x7d\x35\x76\xbc\x2b\x9b\x96\x01\x6d\x38\x53\x17\xda\x9a\xb8\x53\x99\xf4\x37\xdf\x92\xe2\x2d\x5a\xf8\x1b\x06\xdf\xf1\x2e\x5d\xe2\x50\x82\x37\xcd\x12\x0a\xa8\x51\x9e\x36\x79\x78\xc8\x16\xf5\xb2\x85\xc1\xef\x4f\xb3\xcf\x93\xa7\x6f\xe0\x37\xe3\x1b\xe8\x12\xa7\x69\x12\xa7\x79\x90\xda\xd1\x56\xbd\x88\x4c\x6a\x0d\x5a\xb5\x95\x2b\xf3\x2e\xed\xb9\x6b\x57\xbd\x6a\x99\x2a\xfd\x95\xd4\xb4\x3b\xb0\xdc\x47\xb6\x54\xc5\xcc\x7c\x30\xfe\xa8\x57\xf7\x46\xa6\x19\x08\xf0\x68\xca\xab\xe0\xe7\xc5\xcc\xfc\x3f\xb0\x14\x0c\x63\xd0\x4d\x8c\xfb\xa5\x32\x53\x46\x2e\xac\x96\x4f\x61\x16\x55\xdb\xb5\x68\x15\x6b\x74\x19\x9b\x38\xe2\x9e\xc2\x27\x46\xa8\xc7\xa8\xd0\x00\xe8\x97\x6b\x7d\xe9\x81\x86\x38\xcc\x72\xa3\xf1\x23\x98\x3e\x9b\xb3\x2f\xcf\x29\xe1\x02\x5c\x96\x76\xfa\xfe\x3a\xc7\x58\xd6\xd6\xee\xa7\x2d\x6c\x15\xd9\x43\xf5\x74\x22\x4d\xe2\xd4\x26\x78\xe8\xf1\xf5\xa5\xbd\x78\x0d\x69\x1a\xc0\xa0\x2d\xde\x09\x56\x96\xba\xe2\x22\x3e\x4a\x89\x5c\x80\x78\x6d\x4f\x40\x82\xa5\x38\xd3\x47\x4a\xc8\x37\x6c\xcb\x22\x68\x10\x9e\xca\x0d\x3d\x4a\x43\x42\xfe\x80\x71\xec\xe6\x57\x6f\xf4\xfe\xb3\x83\xe5\xae\x8d\xbd\xce\xc3\x65\x29\xa7\xdf\x50\xe4\x38\xca\x19\x65\xf7\xb5\x2d\x5a\x25\xcc\x7a\xd7\x9b\x8c\xa0\x88\x5d\x22\x4e\x71\xeb\x01\xe3\xf8\x23\xa9\x3b\x7e\x22\xf2\x42\xfc\x9a\xe5\x04\xa6\x19\x94\x02\x57\x07\x17\x98\x95\xde\x67\xf5\xcb\x2f\x9d\xfa\xb2\xf7\x57\x2a\xf2\x9c\xba\xa7\x6c\xf2\x1e\x43\x47\xbc\xf0\x1e\xb1\x5f\x7c\xdd\xd7\x2f\xbf\x35\x94\x51\x76\xa2\x28\xb4\x5a\x9d\x10\x7e\x73\x28\x3a\xda\xe9\x9b\x55\x39\x97\xa0\x85\x07\x27\xc1\xd1\x11\x69\x16\x9e\xe2\x96\x57\xa9\x69\x41\x7d\x98\x7c\xef\x76\x2a\x6d\xed\x02\x59\x3d\xfb\xef\xf7\xf2\x09\x60\x6c\xd8\x80\xfb\xe9\xbb\x5d\x85\xad\x67\x2c\x39\x06\x79\xc0\x24\xd9\x08\xf1\xc2\x43\x7e\xf4\x11\xad\x44\xd5\x66\x37\xa1\x91\x86\x68\x12\x2a\x42\xc8\xfd\xa7\x68\x2d\xb1\x95\x41\x6b\xa3\xd4\xde\xb2\x3e\xef\xb6\x0f\x43\x0e\xfa\x98\xb0\xaa\x86\x2b\x7c\x51\xd7\xfe\x46\x97\xbe\xd9\xd3\xd2\x2f\x4c\xa8\x2f\x26\xf3\x09\xe5\x9b\xed\x7f\xf6\x33\x4d\x9d\x92\x8c\x6d\x7d\x11\xb2\x0f\x42\xdf\x4c\x8d\xf4\xeb\x53\x9d\x2c\xd9\xa4\xfa\xfa\xd2\x5a\xf1\xcd\x34\xed\x5f\x09\xeb\x74\x28\x8b\xfa\x3c\xf4\xa1\xa7\xfa\x16\x8f\x76\x11\x5d\x9a\xe7\x37\x7d\xc0\xf3\xa0\xf9\x4c\xb1\xa5\x27\xbc\x6a\x89\x3a\x1a\x34\xe9\x6b\xe5\x62\xed\x85\xaf\x32\x70\x2d\xee\xfa\x20\x96\xad\x29\xde\xe2\xd8\x94\xf1\x8f\xae\x68\xa2\x8c\x6e\x1f\xc8\xd3\x46\x0a\x5c\x52\xfa\xfd\xe8\x5d\xae\xc0\xd4\xa6\x08\xdd\x6e\xfa\x19\xe5\xe0\xc3\x07\xd0\x29\x24\xe7\x9d\xf1\x58\xe0\x57\xd1\xeb\xf5\x81\xda\x30\x4c\xda\x6b\x19\xc6\xc9\xbc\xda\xb4\x54\xd2\xd4\x34\xad\x26\x20\x29\x81\xf6\xc6\x3d\xf0\xf5\x93\xf1\x64\xc4\x87\x0c\xdc\x83\x77\xef\x32\x0e\x53\xfd\x1f\x17\xb0\xa9\x17\xb8\x58\xe0\xc8\x13\xff\x0d\x00\x00\xff\xff\x45\x14\xa8\x0a\xf4\x35\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 13812, mode: os.FileMode(420), modTime: time.Unix(1501102705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x5f\x6f\xdb\xc8\x11\x7f\xf7\xa7\x18\xdc\x8b\x6c\xd4\x6a\x2f\xb8\xe2\x70\x95\xe1\x03\x14\x99\x69\x84\xca\x54\x22\x51\x4d\x82\xc3\x61\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xdd\x0b\x52\x24\xc5\xff\xa4\x1c\xc9\xf7\x28\xee\xec\xcc\xfc\x66\x66\x7f\x33\x5c\x6a\x38\x84\xbf\xf8\xcc\x95\x54\x23\xac\x82\xab\xe1\xf0\x6a\x38\x84\x0f\x42\x69\x57\xe2\xf2\xe3\x0c\x1c\xaa\xe9\x9a\x2a\x04\x27\xf4\xe3\xe5\xab\xa5\x61\x81\xd2\x54\xa3\x8f\x5c\x13\xcd\x7c\x14\xa1\x86\x7b\xf8\xf1\x2e\x5e\xf2\x84\xfd\x54\x7d\x6a\x7b\x2c\x92\x46\x6e\x0b\x87\x71\x17\xee\x61\xb0\xb2\xde\xfd\x32\xb8\x4b\xd5\x71\x87\x4a\x87\xd8\x82\x6f\x84\xf4\x19\x77\x89\xd2\x92\x71\x57\xc1\x3d\x08\x9e\xe8\xd8\xa2\xfd\x44\x36\x21\xb7\x35\x13\x9c\xac\x85\xc3\x30\x5a\xdf\x50\x4f\x61\xc1\x8c\xcf\x38\xf1\x51\x29\xea\xc6\x02\xdf\xa8\xe4\x8c\xbb\x77\x57\x09\x3c\x93\xfa\x38\x82\xc0\x0b\x5c\xf5\xd5\xbb\x03\x6b\x1f\xe0\x08\x8c\xcf\x96\x61\x2e\xa7\x73\xf3\x0e\x96\xf6\x16\x7d\x3a\x82\xe1\x1d\xcc\xbf\x71\x94\x23\x18\xc6\xc8\x27\x0b\x63\x6c\x19\x47\x49\x98\xbe\x03\x73\x6e\x81\xf1\x79\xba\xb4\x96\xa9\x42\xf8\x34\xb5\xde\xc3\x72\xf2\xde\x78\x1c\x43\xe0\x12\x9b\x6a\xea\x89\xc8\x7a\xc1\xfc\x51\x4b\xc9\x91\xc9\xfc\xf1\xd1\x30\xad\x16\x37\x0e\x02\x30\x37\xab\x4a\x60\xba\x84\xc1\x87\xd9\xdf\x02\x37\x4a\x5e\x20\x85\x8d\x4e\x28\xa9\x07\x1e\xe5\x6e\x48\x5d\x1c\x94\xfd\xd8\x2a\x2d\x24\x9e\x2f\x0a\x07\x7d\xc5\x20\x84\x6b\x8f\xd9\xcd\x01\x28\xba\xf0\x32\xfc\x89\xd9\x08\x7e\x54\xb2\xa0\xf7\x01\xc2\x46\x48\x88\x9e\x47\x15\xa7\x50\x2b\x10\x1b\xb8\x7e\xc2\xfd\x2d\x3c\x53\x2f\xc4\x1b\x08\x28\x93\x2a\x0e\x49\x5c\x86\x48\xa5\xbd\x25\x01\xd5\x5b\xb8\x4f\xbc\xbe\x2d\xa6\x30\x12\x73\x70\x43\x43\x4f\x13\x4d\xd7\x1e\xaa\x80\xda\x18\x95\xf3\xa0\xb4\xfa\x8d\xe9\x2d\x11\xcc\xc9\x55\x68\x31\xee\x2c\xf2\x6c\x4f\xa8\x6d\x8b\x90\x6b\x95\xc2\xb7\xc6\x6f\x67\xc6\x11\x7c\x12\xbb\x2c\x02\x77\x60\x65\x66\x47\xf9\x7c\xc4\xfb\x2a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x66\x2e\xe3\x3a\xce\x94\xb9\x9a\xcd\x6e\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x96\x4a\x6a\x6b\x94\xf0\x4c\xe5\x9e\x71\xf7\xfa\xe7\xbf\xdf\x5c\xdd\x54\x6a\x25\xd1\x8e\x9b\x0d\xda\xe7\x76\x39\x51\x9a\x78\x5c\x02\x42\x9a\x10\xa4\x72\x22\x40\x49\x63\x5e\x68\x92\xfc\x41\x48\x07\xe5\x0f\xc0\xb8\x46\x17\x65\x69\x35\xae\x97\xfa\x25\x07\x35\x65\x9e\x82\xff\x28\xc1\xd7\xcd\x41\xf1\xd0\x71\x51\x9e\x39\x28\x89\xd2\x24\x28\x0a\xbf\x86\xc8\xed\x26\x47\x0f\xc2\x64\x4b\xd5\xb6\x3e\xa3\x25\xf9\x40\xe2\x33\x13\xa1\x22\x9d\x1b\x93\x18\x49\xca\x15\x3d\xb0\x6f\x9c\x95\xcc\x8f\x07\xe3\xdd\x78\x35\xb3\xe0\xc7\x92\x85\x63\x56\xfa\xc9\xdb\x9e\x50\xe8\x10\xaa\x21\xea\x20\x4a\x53\x3f\x80\xe8\x20\x45\xbd\x24\x7a\x02\x7f\x08\x8e\xe5\x3d\x12\xa9\xee\xdc\x74\x90\x0d\x03\xa7\xb7\x6c\x56\x47\xc9\x4f\x3f\x10\x52\xa3\x24\xcf\x28\x15\x13\xbc\x82\xe5\x4d\xb9\xa2\x84\xa6\x1e\xb1\x05\xe3\xaa\xbe\x20\x37\x88\x24\x10\xc2\xab\x5f\x8d\x9a\x2e\xd9\x60\x53\xae\xe3\x65\x89\x0a\xe5\x73\x93\x88\x4f\x77\x44\xef\x88\x42\x4d\x14\xfb\xa3\x2a\xd5\x5c\xca\xc7\xb4\x05\x54\x6a\x66\xb3\x80\x9e\x9d\xa1\xea\x6d\x1c\xf9\xaa\x1e\x53\xff\xe3\xde\x4d\x20\xa7\xe2\x27\xcc\x21\x0a\xbf\xa6\x61\x58\x1a\x1f\x57\x86\x39\x69\x89\x44\x1e\x7c\x2a\xdd\xcf\x46\x8c\x60\x69\x8d\x17\xd6\xa1\x91\xbe\x89\x1f\x4c\xcd\xc9\xc2\x88\x5b\xdf\xdb\x2f\xc9\x23\x73\x0e\x8f\x53\xf3\xdf\xe3\xd9\xca\xc8\x7e\x8f\x3f\x1f\x7f\x4f\xc6\x93\xf7\x06\xbc\x39\x0b\x50\x98\x7f\x32\x8d\x07\x78\xfb\xa5\x03\xf1\x78\x66\x19\x8b\x13\x01\x67\xba\x3b\xc4\xff\xca\x9c\x4e\x2c\x97\x2a\xd4\xae\x66\x9a\xa7\xc7\xc6\x86\x1b\x04\x1e\xb3\x0f\xb8\xe2\x7e\xf4\x9d\xed\xe8\xf0\x48\x89\x50\xda\x98\x96\x7a\x03\xf7\xa7\x3c\x35\x18\x8c\x46\x15\x89\x1e\x87\x22\x0f\xef\x72\xb4\xd0\x64\x25\x8e\x7d\x03\x2d\xd4\xed\xad\x4f\xc0\xf7\x90\x42\x93\x67\xe7\xa5\x85\x0e\x2b\xaf\x45\x0c\x27\x82\xfd\x4e\x6a\xe8\xb0\x56\x25\x87\xa6\x0d\x2d\xf4\x90\xdb\x72\xb9\x92\x4d\x29\x22\xef\x5f\xef\x71\x2c\x99\xc2\x3a\x86\xbc\xbe\x0c\xd2\x4e\x06\xb5\xb2\x47\xd3\xcd\xf3\x0a\x6d\x6c\xcd\x4d\xb3\xde\x9f\x32\xad\xe9\x1d\x41\xfe\x8c\x9e\x08\x10\x34\xee\x2a\x54\xbd\x8b\x66\xa7\xd0\xd3\x0d\x8b\x3e\x46\xaf\x90\xb5\x4b\x51\x14\x9a\x96\x15\x73\x39\xd5\xa1\xc4\xba\x37\xaa\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\xea\x78\xf8\xb7\xdf\xcb\x43\x1c\xfa\x82\xc4\xdd\xa0\xca\xd9\x99\x2e\x2e\x38\xb6\xb2\xfa\x51\x57\x55\x4d\x82\x8c\xf9\x48\xd6\x22\xe4\x8e\x8a\x32\xf7\x8b\xa4\xdc\xc5\x98\x0c\xf3\x87\x89\x39\xe9\xd1\x49\x6c\xf7\x3a\xef\x87\xe3\x32\x37\x67\x5d\xdd\x1d\x0e\xf2\x93\xf9\x6c\xf5\x68\x46\x29\x8d\x5e\xa8\x53\x94\x1c\x77\xfa\x99\x7a\xd7\x83\x5e\x03\xc5\x60\x34\x92\xe8\xda\x1e\x55\xaa\xc2\xe8\x67\x43\xd1\xd8\xac\x4e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\x11\x3c\xe1\xfe\x78\xad\x62\x2e\xad\xc5\x78\x6a\xb6\xa0\xad\x12\xde\x89\x09\x8c\x4b\x69\xfc\xf0\x90\xb3\xd6\xc7\x47\xf8\xb0\x98\x3e\x8e\x17\x5f\xe0\x5f\xc6\x17\xb8\x66\xce\xe9\x3d\xf8\x82\x48\x9b\x6c\xb6\x61\x6d\xf5\xb3\x13\xed\x3a\x1b\x50\x52\x48\x53\xf3\xc1\xf8\xfc\x82\x46\x15\xef\xcb\xe9\x83\xb9\x59\xdf\xb6\x56\xcb\xa9\xf9\x4f\x58\x6b\x89\x08\xd7\x89\xf0\x6d\xa5\x2f\xd4\x79\x1a\xb5\xb7\xb3\xb9\x19\xf7\xca\x5e\x3e\x96\x3b\x6c\x9d\x6b\x87\x86\x7a\x36\xe7\x0e\xea\xfa\xb9\x57\xea\xe5\xb7\xd5\xb6\x5d\x5b\xe3\x04\xc9\x7a\x7f\x58\xff\x5e\xb7\x57\xe6\xf4\xe3\x2a\xf5\xbe\xa4\x3b\x8f\x21\xbd\x76\x2b\xb8\x5f\xf7\x9a\x7d\x9b\xde\xa0\x35\x79\x7e\xa4\xd5\x73\xfa\xcc\x9c\xde\xde\x1e\xa7\xfa\xdb\xda\x8b\x82\x0e\x04\x22\x20\xc1\x45\x40\x24\x8a\xf3\x38\x1a\xfa\xdf\x8b\x60\x55\xd1\x64\x37\x7a\xeb\xfd\xd9\x01\x15\x75\xe7\x31\xa5\x77\x95\x05\x10\xf5\xee\xe5\x4f\xef\x45\x7c\xac\x18\xe8\x77\x6c\x6b\xbc\x65\xdc\xc1\x1d\x29\xdf\xab\x13\xc1\x49\x72\x79\x7e\x56\xd7\x3b\xad\xe5\x71\x64\x97\xfc\x45\xf6\x3e\x08\x9e\x00\xe4\xcc\xe1\x6f\x33\xd4\xed\x7e\x67\x0a\x12\x0a\x88\xf4\x45\x73\xf1\x79\xe8\xbd\xd5\x44\x27\x01\x45\x42\x1d\x5e\x27\x87\x23\x52\x99\x5d\x72\x5f\xc2\xf5\x3a\x3b\x9d\x87\x34\x93\xec\x0f\xe2\xa2\x35\x53\xb0\xf3\x12\x8a\x69\x56\x57\xba\xc5\xbf\x70\x0a\x2a\x1f\x0d\x3a\xb1\x94\x36\xf4\x47\x96\xfb\x86\xf3\x3a\x99\xc9\x7f\x34\xea\x82\x95\x93\xed\x8f\xa8\xee\xf3\xd4\xeb\x40\xab\xfd\x30\xd6\x85\xb1\x6e\x53\x7f\xb0\xe9\xa4\xf8\x3a\x00\xb3\x8b\x9e\x2e\x50\x8d\x93\x7f\x51\xf5\xf1\x8e\xfc\xe2\xdc\x50\x36\x55\x3b\x55\x9d\xca\x10\x45\xa5\xc5\x7b\xe4\x4b\x50\x44\x9b\xbd\x3e\x80\x8a\x3b\x4e\x03\x77\xa1\x9e\x59\xb5\xd2\x0b\x48\x5d\xe7\x8c\x87\x66\xbd\xbb\xd0\x34\x9e\x28\x6e\x18\x08\x5f\x38\x8f\x57\x13\xd2\x9c\x8f\xfc\xf8\x79\xf1\xe3\x52\x35\xf6\xe2\x49\x58\x4b\xea\x60\x36\x1b\xa5\xef\x92\x64\x2d\xc4\xd3\x79\x0a\xaa\xc5\x40\xe7\x08\x76\x7d\x9d\x7e\x17\x1b\xfe\xfa\x2b\x0c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x60\x34\xd2\xb8\xd3\x37\x37\xb7\xd0\x2c\x68\x0b\xa7\x9f\x20\x53\x2a\x44\xd9\x2c\xba\x16\xa1\xbb\xd5\xbd\xcc\x17\x44\xdb\x1d\x28\x88\x96\x5c\xb8\x81\x4f\xef\x8d\x85\x71\x38\x4f\x70\x0f\x3f\xfd\x94\xcb\x5e\xd3\xbf\xf9\xc0\x16\x7e\xe0\xa1\xc6\x38\x13\xf9\x3f\x02\x3e\x88\x6f\xfc\xca\x91\x22\x80\xf8\x3f\x4e\xf5\xe5\x62\x53\x65\x53\x07\xef\x3a\x04\x8b\x07\xaa\x6d\x53\x8e\x23\x7a\x89\xf5\xd7\x9c\xb6\xb6\x36\x99\xb4\xaa\xda\x64\xb2\x37\x96\x4c\xe8\xff\x01\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1461452707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1461452707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1481047100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1488415706, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\x51\x6f\xaa\x40\x10\x85\xdf\xf9\x15\x13\x9f\x30\x17\x93\x7b\x6f\x5a\x5f\x4c\x9a\x58\x25\xad\xa9\xc1\xd6\x4a\xd2\x37\xb2\xb0\x23\x6c\xa2\x2c\x99\x1d\xda\xf0\xef\x1b\x68\x69\x10\x57\xad\xaf\x9c\x39\x67\x38\xbb\x5f\x76\x34\x82\x3f\x7b\x95\x92\x60\x84\xb0\x70\x66\x6b\x7f\xba\xf1\x61\x33\xbd\x5f\xfa\x90\x29\xc3\x9a\xaa\x88\x49\x48\x34\xe0\x3a\x00\xf0\xf3\x51\x17\x48\x82\x95\xce\x23\x25\x21\x56\xa9\xca\x19\x82\xd5\x06\x82\x70\xb9\xf4\x9a\xc9\x81\x26\x89\x34\x00\x95\x33\xa6\x48\x1d\xb5\x91\xf5\x76\x8b\x64\x35\x37\xb2\xc1\xdd\xee\x84\x5e\xcb\x71\x59\x9d\x75\xeb\x9d\x8c\x84\x31\xc8\x11\x57\x05\x42\x92\x09\x12\x09\x23\xc1\xbb\xa0\x4a\xe5\xa9\x3b\xbe\x19\xf6\x22\x3b\x1e\x65\x4c\x89\x64\x71\xdd\x8e\xcf\xb8\x12\x2d\x6d\x9b\xfe\xfd\xb7\x7b\xf6\xba\xcc\xb9\xff\xff\x30\x7b\xf4\x67\x4f\xe0\x76\x47\xee\xe0\xef\xf0\xbb\x57\xac\xcb\x34\xe3\x6b\x9b\x1d\xb8\xae\xe8\x76\xe0\xfb\x75\xbb\xd6\x75\xb6\xdf\xe1\x50\xdd\xd0\x19\x4e\x9c\x96\xbf\x30\x58\xbc\x84\x3e\x2c\x82\xb9\xff\x06\x19\x93\x8c\x0a\x25\x61\x15\xf4\x91\x0c\x5f\x17\xc1\x03\xc4\x4c\x88\xe0\xda\xc8\xf4\x5a\x0a\x3b\xe1\x9d\xd4\xb8\x8a\x1a\x0c\x2f\x45\xb7\xac\xda\x52\xea\x90\xfa\xb6\x2e\x65\xf4\x90\xf4\xfa\xe4\x78\xc7\x00\x9e\x5a\xf7\x75\x78\x97\x16\x1e\xb1\xe2\x1d\x5f\xa8\x67\x63\xa3\x5e\xdb\x7d\x17\xe6\xfa\x23\x77\xe6\xeb\xd5\xb3\xfd\x5d\x48\x84\x49\x84\xc4\x89\xf3\x19\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1501102616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql":                                        latestSql,
	"migrations/1_initial_schema.sql":                   migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql":       migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql":             migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql":              migrations5_create_trades_tableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql":                   &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql":       &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql":             &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql":              &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
